from ChocoSolver import solve_sudoku

initial_grid = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]


# Grille facile
easy_sudoku = [
    [2, 0, 0, 4, 5, 6, 7, 8, 9],
    [4, 5, 7, 0, 8, 0, 2, 3, 6],
    [6, 8, 9, 2, 3, 7, 0, 4, 0],
    [0, 3, 5, 7, 0, 2, 9, 6, 4],
    [7, 4, 6, 8, 9, 3, 1, 2, 5],
    [9, 2, 1, 6, 4, 5, 3, 7, 8],
    [5, 7, 3, 9, 2, 8, 6, 1, 0],
    [8, 6, 4, 1, 7, 0, 5, 9, 2],
    [1, 9, 2, 3, 6, 4, 8, 5, 7]
]

# Grille moyenne
medium_sudoku = [
    [0, 2, 0, 6, 0, 8, 0, 0, 0],
    [5, 8, 0, 0, 0, 9, 7, 0, 0],
    [0, 0, 0, 0, 4, 0, 0, 0, 0],
    [3, 7, 0, 0, 0, 0, 5, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 4],
    [0, 0, 8, 0, 0, 0, 0, 1, 3],
    [0, 0, 0, 0, 2, 0, 0, 0, 0],
    [0, 0, 9, 8, 0, 0, 0, 3, 6],
    [0, 0, 0, 3, 0, 6, 0, 9, 0]
]

# Grille difficile
hard_sudoku = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 3, 0, 8, 5],
    [0, 0, 1, 0, 2, 0, 0, 0, 0],
    [0, 0, 0, 5, 0, 7, 0, 0, 0],
    [0, 0, 4, 0, 0, 0, 1, 0, 0],
    [0, 9, 0, 0, 0, 0, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 7, 3],
    [0, 0, 2, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 4, 0, 0, 0, 9]
]

# Chaînes de Sudoku difficiles
hard_sudokus_str = [
    "85...24..72......9..4.........1.7..23.5...9...4...........8..7..17..........36.4.",
    "..53.....8......2..7..1.5..4....53...1..7...6..32...8..6.5....9..4....3......97..",
    "12..4......5.69.1...9...5.........7.7...52.9..3......2.9.6...5.4..9..8.1..3...9.4",
    "...57..3.1......2.7...234......8...4..7..4...49....6.5.42...3.....7..9....18.....",
    "7..1523........92....3.....1....47.8.......6............9...5.6.4.9.7...8....6.1.",
    "1....7.9..3..2...8..96..5....53..9...1..8...26....4...3......1..4......7..7...3..",
    "1...34.8....8..5....4.6..21.18......3..1.2..6......81.52..7.9....6..9....9.64...2",
    "...92......68.3...19..7...623..4.1....1...7....8.3..297...8..91...5.72......64...",
    ".6.5.4.3.1...9...8.........9...5...6.4.6.2.7.7...4...5.........4...8...1.5.2.3.4.",
    "7.....4...2..7..8...3..8.799..5..3...6..2..9...1.97..6...3..9...3..4..6...9..1.35",
    "....7..2.8.......6.1.2.5...9.54....8.........3....85.1...3.2.8.4.......9.7..6...."
]

# Fonction pour convertir une chaîne Sudoku en tableau 2D
def convert_sudoku_str_to_array(sudoku_str):
    sudoku_array = []
    for i in range(0, len(sudoku_str), 9):
        row_str = sudoku_str[i:i+9]
        row = [0 if char == '.' else int(char) for char in row_str]
        sudoku_array.append(row)
    return sudoku_array

# Conversion des chaînes Sudoku difficiles en tableaux 2D
hard_sudokus = [convert_sudoku_str_to_array(sudoku_str) for sudoku_str in hard_sudokus_str]

search_types = ['default', 'dom_over_w_deg', 'dom_over_w_deg_ref', 'activity_based', 'min_dom_lb', 'min_dom_ub', 'random', 'conflict_history', 'input_order_lb', 'input_order_ub', 'failure_length_based', 'failure_rate_based']

for search_type in search_types:
    print("\nTesting search type: {}".format(search_type))
    for sudoku in hard_sudokus:
        r = solve_sudoku(sudoku, search_type, print_stats=True)